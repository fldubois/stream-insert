{
  "parserOptions": {
    "ecmaVersion": 5
  },
  "env": {
    "node": true
  },
  "rules": {

    // Possible Errors

    // disallow assignment operators in conditional expressions
    "no-cond-assign": ["error", "always"],
    // disallow the use of console
    "no-console": "warn",
    // disallow constant expressions in conditions
    "no-constant-condition": "error",
    // disallow control characters in regular expressions
    "no-control-regex": "error",
    // disallow the use of debugger
    "no-debugger": "warn",
    // disallow duplicate arguments in function definitions
    "no-dupe-args": "error",
    // disallow duplicate keys in object literals
    "no-dupe-keys": "error",
    // disallow duplicate case labels
    "no-duplicate-case": "error",
    // disallow empty block statements
    "no-empty": "error",
    // disallow empty character classes in regular expressions
    "no-empty-character-class": "error",
    // disallow reassigning exceptions in catch clauses
    "no-ex-assign": "error",
    // disallow unnecessary boolean casts
    "no-extra-boolean-cast": "error",
    // disallow unnecessary parentheses
    "no-extra-parens": ["error", "functions"],
    // disallow unnecessary semicolons
    "no-extra-semi": "error",
    // disallow reassigning function declarations
    "no-func-assign": "error",
    // disallow function or var declarations in nested blocks
    "no-inner-declarations": ["error", "functions"],
    // disallow invalid regular expression strings in RegExp constructors
    "no-invalid-regexp": "error",
    // disallow irregular whitespace outside of strings and comments
    "no-irregular-whitespace": "error",
    // disallow negating the left operand in in expressions
    "no-negated-in-lhs": "error",
    // disallow calling global object properties as functions
    "no-obj-calls": "error",
    // disallow use of Object.prototypes builtins directly
    "no-prototype-builtins": "off",
    // disallow multiple spaces in regular expression literals
    "no-regex-spaces": "error",
    // disallow sparse arrays
    "no-sparse-arrays": "error",
    // disallow confusing multiline expressions
    "no-unexpected-multiline": "error",
    // disallow unreachable code after return, throw, continue, and break statements
    "no-unreachable": "error",
    // disallow control flow statements in finally blocks
    "no-unsafe-finally": "error",
    // require calls to isNaN() when checking for NaN
    "use-isnan": "error",
    // enforce valid JSDoc comments
    "valid-jsdoc": "off",
    // enforce comparing typeof expressions against valid strings
    "valid-typeof": "error",

    // Best Practices

    // enforce getter and setter pairs in objects
    "accessor-pairs": ["error", {"getWithoutSet": false, "setWithoutGet": true}],
    // enforce return statements in callbacks of array methods
    "array-callback-return": "error",
    // enforce the use of variables within the scope they are defined
    "block-scoped-var": "error",
    // enforce a maximum cyclomatic complexity allowed in a program
    "complexity": "off",
    // require return statements to either always or never specify values
    "consistent-return": "off",
    // enforce consistent brace style for all control statements
    "curly": ["error", "all"],
    // require default cases in switch statements
    "default-case": "error",
    // enforce consistent newlines before and after dots
    "dot-location": "off",
    // enforce dot notation whenever possible
    "dot-notation": ["error", {"allowKeywords": false, "allowPattern": "^[A-Za-z]+((_|-)[A-Za-z]+)+$"}],
    // require the use of === and !==
    "eqeqeq": ["error", "allow-null"],
    // require for-in loops to include an if statement
    "guard-for-in": "error",
    // disallow the use of alert, confirm, and prompt
    "no-alert": "error",
    // disallow the use of arguments.caller or arguments.callee
    "no-caller": "error",
    // disallow lexical declarations in case clauses
    "no-case-declarations": "error",
    // disallow division operators explicitly at the beginning of regular expressions
    "no-div-regex": "error",
    // disallow else blocks after return statements in if statements
    "no-else-return": "error",
    // disallow empty functions
    "no-empty-function": "warn",
    // disallow empty destructuring patterns
    "no-empty-pattern": "error",
    // disallow null comparisons without type-checking operators
    "no-eq-null": "error",
    // disallow the use of eval()
    "no-eval": "error",
    // disallow extending native types
    "no-extend-native": "error",
    // disallow unnecessary calls to .bind()
    "no-extra-bind": "error",
    // disallow unnecessary labels
    "no-extra-label": "error",
    // disallow fallthrough of case statements
    "no-fallthrough": "error",
    // disallow leading or trailing decimal points in numeric literals
    "no-floating-decimal": "error",
    // disallow shorthand type conversions
    "no-implicit-coercion": "off",
    // disallow var and named function declarations in the global scope
    "no-implicit-globals": "warn",
    // disallow the use of eval()-like methods
    "no-implied-eval": "error",
    // disallow this keywords outside of classes or class-like objects
    "no-invalid-this": "error",
    // disallow the use of the __iterator__ property
    "no-iterator": "error",
    // disallow labeled statements
    "no-labels": "error",
    // disallow unnecessary nested blocks
    "no-lone-blocks": "error",
    // disallow function declarations and expressions inside loop statements
    "no-loop-func": "off",
    // disallow magic numbers
    "no-magic-numbers": ["warn", {"ignore": [-1, 0, 1, 2]}],
    // disallow multiple spaces
    "no-multi-spaces": "off",
    // disallow multiline strings
    "no-multi-str": "error",
    // disallow assignments to native objects or read-only global variables
    "no-native-reassign": "error",
    // disallow new operators outside of assignments or comparisons
    "no-new": "error",
    // disallow new operators with the Function object
    "no-new-func": "error",
    // disallow new operators with the String, Number, and Boolean objects
    "no-new-wrappers": "error",
    // disallow octal literals
    "no-octal": "error",
    // disallow octal escape sequences in string literals
    "no-octal-escape": "error",
    // disallow reassigning function parameters
    "no-param-reassign": "off",
    // disallow the use of the __proto__ property
    "no-proto": "error",
    // disallow var redeclaration
    "no-redeclare": "error",
    // disallow assignment operators in return statements
    "no-return-assign": ["error", "always"],
    // disallow javascript: urls
    "no-script-url": "error",
    // disallow assignments where both sides are exactly the same
    "no-self-assign": "error",
    // disallow comparisons where both sides are exactly the same
    "no-self-compare": "error",
    // disallow comma operators
    "no-sequences": "error",
    // disallow throwing literals as exceptions
    "no-throw-literal": "error",
    // disallow unmodified loop conditions
    "no-unmodified-loop-condition": "error",
    // disallow unused expressions
    "no-unused-expressions": "error",
    // disallow unused labels
    "no-unused-labels": "error",
    // disallow unnecessary calls to .call() and .apply()
    "no-useless-call": "error",
    // disallow unnecessary concatenation of literals or template literals
    "no-useless-concat": "error",
    // disallow unnecessary escape characters
    "no-useless-escape": "error",
    // disallow void operators
    "no-void": "off",
    // disallow specified warning terms in comments
    "no-warning-comments": ["warn", {"terms": ["todo", "fixme"], "location": "start"}],
    // disallow with statements
    "no-with": "error",
    // enforce the consistent use of the radix argument when using parseInt()
    "radix": ["error", "always"],
    // require var declarations be placed at the top of their containing scope
    "vars-on-top": "off",
    // require parentheses around immediate function invocations
    "wrap-iife": ["error", "inside"],
    // require or disallow “Yoda” conditions
    "yoda": "off",

    // Strict Mode

    // require or disallow strict mode directives
    "strict": ["error", "global"],

    // Variables

    // require or disallow initialization in var declarations
    "init-declarations": ["error", "always"],
    // disallow catch clause parameters from shadowing variables in the outer scope
    "no-catch-shadow": "error",
    // disallow deleting variables
    "no-delete-var": "error",
    // disallow labels that share a name with a variable
    "no-label-var": "off",
    // disallow specified global variables
    "no-restricted-globals": "off",
    // disallow var declarations from shadowing variables in the outer scope
    "no-shadow": "error",
    // disallow identifiers from shadowing restricted names
    "no-shadow-restricted-names": "error",
    // disallow the use of undeclared variables unless mentioned in /*global */ comments
    "no-undef": ["error", {"typeof": true}],
    // disallow initializing variables to undefined
    "no-undef-init": "error",
    // disallow the use of undefined as an identifier
    "no-undefined": "error",
    // disallow unused variables
    "no-unused-vars": ["error", {"vars": "all", "args": "after-used"}],
    // disallow the use of variables before they are defined
    "no-use-before-define": "error",

    // Node.js and CommonJS

    // require return statements after callbacks
    "callback-return": ["warn", ["callback", "cb", "next", "done"]],
    // require require() calls to be placed at top-level module scope
    "global-require": "off",
    // require error handling in callbacks
    "handle-callback-err": ["error", "^err(or)?"],
    // disallow require calls to be mixed with regular var declarations
    "no-mixed-requires": ["error", {"grouping": true, "allowCall": false}],
    // disallow new operators with calls to require
    "no-new-require": "error",
    // disallow string concatenation with __dirname and __filename
    "no-path-concat": "off",
    // disallow the use of process.env
    "no-process-env": "off",
    // disallow the use of process.exit()
    "no-process-exit": "off",
    // disallow specified modules when loaded by require
    "no-restricted-modules": "off",
    // disallow synchronous methods
    "no-sync": "error",

    // Stylistic Issues

    // enforce consistent spacing inside array brackets
    "array-bracket-spacing": ["error", "never"],
    // enforce consistent spacing inside single-line blocks
    "block-spacing": ["error", "never"],
    // enforce consistent brace style for blocks
    "brace-style": ["error", "1tbs", {"allowSingleLine": false}],
    // enforce camelcase naming convention
    "camelcase": ["error", {"properties": "always"}],
    // require or disallow trailing commas
    "comma-dangle": ["error", "never"],
    // enforce consistent spacing before and after commas
    "comma-spacing": ["error", {"before": false, "after": true}],
    // enforce consistent comma style
    "comma-style": ["error", "last"],
    // enforce consistent spacing inside computed property brackets
    "computed-property-spacing": ["error", "never"],
    // enforce consistent naming when capturing the current execution context
    "consistent-this": ["error", "self"],
    // enforce at least one newline at the end of files
    "eol-last": "error",
    // require or disallow named function expressions
    "func-names": "off",
    // enforce the consistent use of either function declarations or expressions
    "func-style": "off",
    // disallow specified identifiers
    "id-blacklist": "off",
    // enforce minimum and maximum identifier lengths
    "id-length": ["error", {"min": 1, "max": 20}],
    // require identifiers to match a specified regular expression
    "id-match": "off",
    // enforce consistent indentation
    "indent": ["error", 2, {"SwitchCase": 1}],
    // enforce the consistent use of either double or single quotes in JSX attributes
    "jsx-quotes": ["error", "prefer-double"],
    // enforce consistent spacing between keys and values in object literal properties
    "key-spacing": ["error", {"beforeColon": false, "afterColon": true, "align": "value"}],
    // enforce consistent spacing before and after keywords
    "keyword-spacing": ["error", {"before": true, "after": true}],
    // enforce consistent linebreak style
    "linebreak-style": ["error", "unix"],
    // require empty lines around comments
    "lines-around-comment": ["error", {"beforeBlockComment": true, "allowBlockStart": true, "allowObjectStart": true}],
    // enforce a maximum depth that blocks can be nested
    "max-depth": ["error", 4],
    // enforce a maximum line length
    "max-len": ["error", 120, 4, {"ignoreUrls": true}],
    // enforce a maximum file length
    "max-lines": "off",
    // enforce a maximum depth that callbacks can be nested
    "max-nested-callbacks": ["error", 4],
    // enforce a maximum number of parameters in function definitions
    "max-params": ["error", 5],
    // enforce a maximum number of statements allowed in function blocks
    "max-statements": "off",
    // enforce a maximum number of statements allowed per line
    "max-statements-per-line": ["error", {"max": 1}],
    // require constructor function names to begin with a capital letter
    "new-cap": "error",
    // require parentheses when invoking a constructor with no arguments
    "new-parens": "error",
    // require or disallow an empty line after var declarations
    "newline-after-var": "error",
    // require an empty line before return statements
    "newline-before-return": "error",
    // require a newline after each call in a method chain
    "newline-per-chained-call": "off",
    // disallow Array constructors
    "no-array-constructor": "error",
    // disallow bitwise operators
    "no-bitwise": "off",
    // disallow continue statements
    "no-continue": "off",
    // disallow inline comments after code
    "no-inline-comments": "off",
    // disallow if statements as the only statement in else blocks
    "no-lonely-if": "error",
    // disallow mixes of different operators
    "no-mixed-operators": "error",
    // disallow mixed spaces and tabs for indentation
    "no-mixed-spaces-and-tabs": "error",
    // disallow multiple empty lines
    "no-multiple-empty-lines": "error",
    // disallow negated conditions
    "no-negated-condition": "off",
    // disallow nested ternary expressions
    "no-nested-ternary": "error",
    // disallow Object constructors
    "no-new-object": "error",
    // disallow the unary operators ++ and --
    "no-plusplus": "off",
    // disallow specified syntax
    "no-restricted-syntax": "off",
    // disallow spacing between function identifiers and their applications
    "no-spaced-func": "error",
    // disallow ternary operators
    "no-ternary": "off",
    // disallow trailing whitespace at the end of lines
    "no-trailing-spaces": "error",
    // disallow dangling underscores in identifiers
    "no-underscore-dangle": ["error", {"allow": ["_transform", "_flush"]}],
    // disallow ternary operators when simpler alternatives exist
    "no-unneeded-ternary": ["error", {"defaultAssignment": true}],
    // disallow whitespace before properties
    "no-whitespace-before-property": "error",
    // enforce consistent line breaks inside braces
    "object-curly-newline": "off",
    // enforce consistent spacing inside braces
    "object-curly-spacing": ["error", "never"],
    // enforce placing object properties on separate lines
    "object-property-newline": "off",
    // enforce variables to be declared either together or separately in functions
    "one-var": ["error", "never"],
    // require or disallow newlines around var declarations
    "one-var-declaration-per-line": ["error", "always"],
    // require or disallow assignment operator shorthand where possible
    "operator-assignment": ["error", "always"],
    // enforce consistent linebreak style for operators
    "operator-linebreak": ["error", "before"],
    // require or disallow padding within blocks
    "padded-blocks": ["error", "never"],
    // require quotes around object literal property names
    "quote-props": ["error", "consistent-as-needed"],
    // enforce the consistent use of either backticks, double, or single quotes
    "quotes": ["error", "single", "avoid-escape"],
    // require JSDoc comments
    "require-jsdoc": ["warn", {
      "require": {
        "FunctionDeclaration": true,
        "MethodDefinition":    true,
        "ClassDeclaration":    true
      }
    }],
    // require or disallow semicolons instead of ASI
    "semi": ["error", "always"],
    // enforce consistent spacing before and after semicolons
    "semi-spacing": ["error", {"before": false, "after": true}],
    // require variables within the same declaration block to be sorted
    "sort-vars": "error",
    // enforce consistent spacing before blocks
    "space-before-blocks": ["error", {"functions": "always", "keywords": "always"}],
    // enforce consistent spacing before function definition opening parenthesis
    "space-before-function-paren": ["error", {"anonymous": "always", "named": "never"}],
    // enforce consistent spacing inside parentheses
    "space-in-parens": ["error", "never"],
    // require spacing around operators
    "space-infix-ops": "error",
    // enforce consistent spacing before or after unary operators
    "space-unary-ops": ["error", {"words": true, "nonwords": false}],
    // enforce consistent spacing after the // or /* in a comment
    "spaced-comment": ["error", "always"],
    // require or disallow the Unicode BOM
    "unicode-bom": "off",
    // require parenthesis around regex literals
    "wrap-regex": "off",

    // ES2015

    // require braces around arrow function bodies
    "arrow-body-style": "off",
    // require parentheses around arrow function arguments
    "arrow-parens": ["error", "always"],
    // enforce consistent spacing before and after the arrow in arrow functions
    "arrow-spacing": ["error", {"before": true, "after": true}],
    // require super() calls in constructors
    "constructor-super": "error",
    // enforce consistent spacing around * operators in generator functions
    "generator-star-spacing": ["error", "after"],
    // disallow reassigning class members
    "no-class-assign": "error",
    // disallow arrow functions where they could be confused with comparisons
    "no-confusing-arrow": "error",
    // disallow reassigning const variables
    "no-const-assign": "error",
    // disallow duplicate class members
    "no-dupe-class-members": "error",
    // disallow duplicate module imports
    "no-duplicate-imports": "warn",
    // disallow new operators with the Symbol object
    "no-new-symbol": "error",
    // disallow specified modules when loaded by import
    "no-restricted-imports": "off",
    // disallow this/super before calling super() in constructors
    "no-this-before-super": "error",
    // disallow unnecessary computed property keys in object literals
    "no-useless-computed-key": "error",
    // disallow unnecessary constructors
    "no-useless-constructor": "error",
    // disallow renaming import, export, and destructured assignments to the same name
    "no-useless-rename": "error",
    // require let or const instead of var
    "no-var": "off",
    // require or disallow method and property shorthand syntax for object literals
    "object-shorthand": ["error", "never"],
    // require arrow functions as callbacks
    "prefer-arrow-callback": "off",
    // require const declarations for variables that are never reassigned after declared
    "prefer-const": "off",
    // require Reflect methods where applicable
    "prefer-reflect": "off",
    // require rest parameters instead of arguments
    "prefer-rest-params": "off",
    // require spread operators instead of .apply()
    "prefer-spread": "off",
    // require template literals instead of string concatenation
    "prefer-template": "off",
    // require generator functions to contain yield
    "require-yield": "error",
    // enforce spacing between rest and spread operators and their expressions
    "rest-spread-spacing": ["error", "never"],
    // enforce sorted import declarations within modules
    "sort-imports": "error",
    // require or disallow spacing around embedded expressions of template strings
    "template-curly-spacing": ["error", "never"],
    // require or disallow spacing around the * in yield* expressions
    "yield-star-spacing": ["error", "after"]

  }
}
